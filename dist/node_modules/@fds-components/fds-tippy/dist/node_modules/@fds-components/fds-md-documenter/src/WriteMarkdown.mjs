import * as fs from "fs-extra";
import * as prettier from "prettier";

export default class WriterMarkdown {
    onAppend;
    source = "";
    hasToC = false;
    toc = [];

    constructor(options) {
        this.options={ parser: "markdown", printWidth: 80 };
        this.options = {...this.options,onAppend:options.onAppend}
        this.onAppend = options.onAppend;
    }

    format(raw ) {
        try {
            return prettier.format(raw, this.options);
        } catch (error) {
            process.stderr.write(error + "\n");
            return raw;
        }
    }

    async write(filePath, raw) {
        try {
            await fs.ensureFile(filePath);
            await fs.writeFile(filePath, this.format(raw));
        } catch (error) {
            process.stderr.write(error + "\n");
        }
    }

    appendLineBreaks() {
        this.source += "\n\n";
        return this;
    }

    append(type, raw) {
        switch (type) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                const length = Number(type.slice(-1));
                this.source += `${Array.from({ length })
                    .map((_) => "#")
                    .join("")} ${raw}`;

                if (this.hasToC && type === "h2") {
                    this.toc.push({
                        array: Array.from({ length: (length - 1) * 2 }),
                        raw,
                    });
                }
                break;
            case "quote":
                this.source += `> ${raw}`;
                break;
            case "p":
                this.source += raw;
                break;
            case "divider":
                this.source += "---";
                break;
            case "raw":
                this.source += raw;
                break;
        }

        if (type !== "raw") this.appendLineBreaks();
        //this.onAppend.call(this, type, this);
        return this;
    }

    tableOfContents() {
        this.source += "<!-- __TOC__ -->";
        this.hasToC = true;
        this.appendLineBreaks();
        return this;
    }

    end() {
        this.source = this.source.replace(
            "<!-- __TOC__ -->",
            this.toc
                .map(({ array, raw }) => {
                    return `${array.join(" ")} - [${raw}](#${raw.toLowerCase().replace(/\`/g, "").replace(/\s+/g, "-")})`;
                })
                .join("\n")
        );

        return this.source;
    }
}
