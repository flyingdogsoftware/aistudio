import * as fs from "fs";
import * as path from "path";
import writeMarkdown from "./writer_markdown.mjs";
import sveld from "sveld";

const {parse} = require('comment-parser')

const jsonfilename = "COMPONENT_API.json";
const mdfilename = "README.md";
const packagejsonfile = "package.json";


export default function mdDocumentation() {
    let sv = sveld({markdown: true, json: true});
    if (!process.env.MAKE_DOC){
        return [];
    } else {
    return [
        sv,
        {
            name: 'md-documentation', // this name will show up in warnings and errors
            buildEnd(source) {
                let jsonres = loadJsonFile(jsonfilename);
                if (!jsonres) return;
                let packagejson = loadJsonFile(packagejsonfile);
                let outputapifilename = packagejson.name.replace("@fds-components/", "");
                let mdres = loadMdFile();
                let componentEntry = getComponentEntry(packagejson);
                let componentDoc;
                //componentDoc = jsonres.components[0].jsdoc;
                componentDoc = parse(componentEntry);
                let appendmd = writeMarkdown(jsonres, componentDoc, {outFile: mdfilename});
                let resstring = addResult(mdres, appendmd);
                saveMdFile(resstring);
                saveJsonFile(jsonres, componentDoc, outputapifilename);
                console.log("module is working!!!", resstring);
                return null; // other ids should be handled as usually
            },
        }];
    }
    function addResult(mdres, jsonres) {
        const regex = /(\[\/\/\]: # \"Autogeneratedstart\")([\s\S]+)(\[\/\/\]: # \"Autogeneratedstop\")/mg;
        mdres = mdres.replace(regex, "$1" + "\n" + jsonres + "\n" + "$3");
        return mdres;
    }

    function loadJsonFile(name) {
        const datafile = path.join(process.cwd(), name);
        if (fs.existsSync(datafile)) {
            const parsed = JSON.parse(fs.readFileSync(datafile, "utf-8"));
            return parsed;
        }
        return false;
    }

    function loadMdFile() {
        const datafile = path.join(process.cwd(), mdfilename);
        if (fs.existsSync(datafile)) {
            const parsed = fs.readFileSync(datafile, "utf-8");
            return parsed;
        }
    }

    function saveMdFile(data) {
        const datafile = path.join(process.cwd(), mdfilename);
        if (fs.existsSync(datafile)) {
            fs.writeFileSync(datafile, data, "utf-8");
        }
    }

    function saveJsonFile(data, componentEntry, outputapifilename) {
        if (componentEntry) {
            data = data.components[0];
            data.jsdoc = componentEntry;
            data.componentname = outputapifilename;
        }
        outputapifilename = "api-" + outputapifilename + ".json";
        const datafile = path.join(process.cwd(), outputapifilename);
        //if (fs.existsSync(datafile)) {
        fs.writeFileSync(datafile, JSON.stringify(data, null, 2), "utf-8");
        //}
    }


    function getComponentEntry(packagejson) {
        if (packagejson.componentFile === undefined || !packagejson.componentFile) {
            packagejson = {componentFile: 'src/App.svelte'}
        }
        const datafile = path.join(process.cwd(), packagejson.componentFile);
        if (fs.existsSync(datafile)) {
            const parsed = fs.readFileSync(datafile, "utf-8");
            return parsed;
        } else {
            process.stdout.write("Could not load component file.\n", datafile);
        }

        process.stdout.write("Could not determine an entrypoint.\n");
        process.stdout.write('Specify an entrypoint to your Svelte code in the "svelte" field of your package.json.\n');
        return null;

    }

}

//mdDocumentation()[0].buildEnd()