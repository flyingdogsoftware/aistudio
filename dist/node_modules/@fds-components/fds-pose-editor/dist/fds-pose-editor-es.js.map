{"version":3,"file":"fds-pose-editor-es.js","sources":["../node_modules/svelte/internal/index.mjs","../node_modules/@fds-components/fds-helper/dist/index.js","../src/App.svelte"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.58.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","let path = import.meta.url\nexport default class fdsHelper {\n\n    static async getInfo(type,componentname){\n        let fetchurl = \"\";\n        let alternativefetchurl = \"\";\n        let notfound = false;\n        if(componentname){\n            componentname = componentname.replace(\"@fds-components/\",\"\");\n            fetchurl  = fdsHelper.get_href()+type+\"-\"+componentname+\".json\";\n            alternativefetchurl =  `@fds-components/${componentname}/dist/${type}-${componentname}.json`;\n        }\n\n        let res = await fetch(fetchurl)\n            .then(response => {\n                if (!response.ok) {\n                    notfound = true;\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (type!==\"api\") return data\n                if (!data) return\n                if (!data.components) return data\n                return data.components[0]\n            });\n            if(notfound) {\n                res = await fetch(alternativefetchurl)\n                    .then(response => {\n                        if (!response.ok) {\n                            notfound = true;\n                        }\n                        return response.json();\n                    })\n                    .then(data => {\n                        if (type !== \"api\") return data\n                        if (!data) return\n                        if (!data.components) return data\n                        return data.components[0]\n                    });\n            }\n        return res;\n    }\n\n\n    static get_href() {\n        return new URL('./', path).href\n    }\n\n    static get_local() {\n        return new URL('./', path).pathname\n    }\n}\n","<svelte:options tag=\"fds-pose-editor\" />\n\n<script>\n    import { onMount } from \"svelte\"\n    import fdsHelper from \"@fds-components/fds-helper\"\n    let path = fdsHelper.get_href()\n    import {get_current_component} from \"svelte/internal\"\n    let host = get_current_component()\n    import { version as componentversion, name } from \"../package.json\"\n    /*global BABYLON */\n\n    /**\n     * width of canvas\n     * @type {integer}\n     */\n    export let width=1000\n    /**\n     * height of canvas\n     * @type {integer}\n     */    \n    export let height=1000\n    /**\n     * turn human figure on/off\n     *  @type {boolean}\n     */\n    let showHuman=true\n    /**\n     * object with data property to save scene on destroy \n     */\n    export let external_scene_storage=null\n\n    \n    /** show character or not, human supported only\n     * @param  {(\"human\" | \"\")} \n     */\n    export let show_character=\"human\"\n\n    /**\n     * make camera movement lock\n     * @param  {(\"lock\" | \"\")} \n     */\n    export let camera_behaviour=\"\"\n    /**\n     * Get information about component\n     * @param  {(\"api\" | \"examples\" | \"css\")} type the info type\n     */\n    export async function getInfo(type) {\n        if (type === \"version\") {\n            return new Promise((resolve) => {\n                resolve(componentversion);\n            });\n        }\n        let res = await fdsHelper.getInfo(type, name);\n        return res;\n    }\n\n    /**\n     * version of component\n     * @type {string}\n     */\n    export const version = componentversion;\n    function _destroy() {\n        if (!external_scene_storage) return\n        external_scene_storage.data=getSceneNoImage()\n    }\n    onMount(() => {\n        return () => {\n            _destroy()\n        }\n    })   \n    \n    $: {\n        if (canvas) {\n            initCanvas(canvas)\n        } \n       \n    }\n    $: {    \n        if (show_character==\"human\") {\n            showHuman=true\n        } else {\n            showHuman=false\n        }\n        showMeshes(loadedMeshes,showHuman)         \n    }\n    $: {\n        if (background_type) setBackground(background_type)\n    }\n    $: {\n        if (mode) setMode(mode)\n    }\n    $: {\n        if (scene) {\n            if (!camera_behaviour)      scene.activeCamera.attachControl(canvas, true)\n            if (camera_behaviour===\"lock\")        scene.activeCamera.detachControl()\n        }\n    }\n    let engine\n    export let scene    // for scene.activeCamera access\n    let meshFigure\n    let loadedMeshes=[]\n    /**\n     * get points for a circle (=shape of each bone)\n     * @param radius\n     * @param numSegments\n     */\n    function getCirclePoints(radius, numSegments) {\n        let points = []\n        for (let i = 0; i < numSegments; i++) {\n            let angle = (i / numSegments) * Math.PI * 2\n            let x = radius * Math.cos(angle)\n            let y = radius * Math.sin(angle)\n            points.push(new BABYLON.Vector3(x, y, 0))\n        }\n        return points\n    }\n    function getRotationAxis(but) {\n        let rotationAxis\n            switch (but) {\n                case \"x\":\n                    rotationAxis = BABYLON.Axis.X\n                    break;\n                case \"y\":\n                    rotationAxis = BABYLON.Axis.Y\n                    break;\n                case \"z\":\n                    rotationAxis = BABYLON.Axis.Z\n                    break;\n            }   \n            return rotationAxis\n    } \n    function startRenderLoop(engine) {\n            engine.runRenderLoop(function () {\n                if (scene && scene.activeCamera) {\n                    if (rotationGizmoActive &&  mode===\"edit_skeleton\") {\n\n                     //   var worldMatrix = proxySphere.getWorldMatrix();\n/*var quatRotation =  new BABYLON.Quaternion();\nvar position = new BABYLON.Vector3();\nvar scale = new BABYLON.Vector3();\nworldMatrix.decompose(scale, quatRotation, position);                        \nlet euler=quatRotation.toEulerAngles()*/\n\n                   //     proxySphere.computeWorldMatrix(true)\n                        let newRotationValue=proxySphere.rotation[currentAxis]\n//console.log(euler,proxySphere)\n\n //                       if (currentAxis===\"x\") newRotationValue*=100\n                  //      let rotQ=proxySphere.rotationQuaternion\n                   //     let newRotationValue=rotQ.toEulerAngles()[currentAxis]\n                       let dt=currentRotationValue-newRotationValue\n                   //     pickedTransformNode.rotate(getRotationAxis(currentAxis), dt, BABYLON.Space.WORLD)\n                        currentRotationValue=newRotationValue\n                     //   if (dt) console.log(currentAxis,dt,newRotationValue)\n//                        const centerLocalRotation = parentBox.rotation.clone().negateInPlace().add(centerWorldRotation);\n //   const centerReWorldRotation = BABYLON.Vector3.TransformCoordinates(centerLocalRotation.clone(), parentWorldMatrix)                        \n                       // if (currentJointName===\"joint_LowerLeg L\" || currentJointName===\"joint_LowerLeg R\") {\n                       //     pickedTransformNode.rotation=new BABYLON.Vector3(-z,y,x)                        \n                       // } else {\n                      //      pickedTransformNode.rotation=new BABYLON.Vector3(x,y,z)                        \n\n                       // }\n\n                 /*      let worldRotationQuat = BABYLON.Quaternion.FromEulerVector(proxySphere.rotation);\n                       console.log(pickedTransformNode.parent)\n var worldMatrix = pickedTransformNode.parent.getWorldMatrix();                       \nvar quatRotation =  new BABYLON.Quaternion();\nvar position = new BABYLON.Vector3();\nvar scale = new BABYLON.Vector3();\nworldMatrix.decompose(scale, quatRotation, position);             \n\n\n                        let rotationQuaternion = worldRotationQuat.multiply(BABYLON.Quaternion.Inverse(quatRotation))                        \n                        pickedTransformNode.rotation=rotationQuaternion.toEulerAngles()*/\n\n                    }\n\n\n                    scene.render()\n                }\n            });\n        }\n    let wait = function () {\n        var promise = new Promise((resolve) => {\n            setTimeout(() => {\n                resolve('')\n            }, 100)\n        })\n        return promise\n    }        \n    export async function renderForAI() {\n      //  canvas.width=width\n     //   canvas.height=height        \n        setMode(\"\")\n        let backgroundBack=background_type\n        setBackground(\"black\")\n        let showH=show_character\n        show_character=\"\"\n        for(let mesh of scene.meshes) {\n            if (mesh.renderForAI) {\n                mesh.material.disableLighting = true\n                mesh.material.emissiveColor = mesh.aiColor\n            }\n        }\n        await wait()\n        show_character=showH\n        let url=canvas.toDataURL()     \n        for(let mesh of scene.meshes) {\n            if (mesh.renderForAI) {\n                mesh.material.disableLighting = false\n                mesh.material.emissiveColor =BABYLON.Color3.FromHexString(\"#000000\")  \n            }\n        }        \n        setBackground(backgroundBack)\n\n        return url\n    }\n    let skeletonInfo={\n        \"top\": { boneColor:\"#00009b\",jointColor:\"#9e323a\" },\n        \"Shoulder L\": { boneColor:\"#993300\",jointColor:\"\" },\n        \"Shoulder R\": { boneColor:\"#990000\",jointColor:\"\" },\n        \"UpperArm L\": { boneColor:\"#669900\",jointColor:\"#349c00\" },\n        \"UpperArm R\": { boneColor:\"#996600\",jointColor:\"#916100\" },\n        \"LowerArm L\": { boneColor:\"#339900\",jointColor:\"#008400\" },\n        \"LowerArm R\": { boneColor:\"#999900\",jointColor:\"#9a9900\" },\n        \"Wrist L\": { boneColor:\"#009999\",jointColor:\"\" },\n        \"Wrist R\": { boneColor:\"#009900\",jointColor:\"\" },                \n        \"UpperLeg L\": { boneColor:\"#006699\",jointColor:\"#003194\" },\n        \"UpperLeg R\": { boneColor:\"#009933\",jointColor:\"#00a767\" },\n        \"LowerLeg L\": { boneColor:\"#003399\",jointColor:\"#0011b3\" },\n        \"LowerLeg R\": { boneColor:\"#009966\",jointColor:\"#00a49d\" },\n\n\n        // head\n        \"Eye L\": { boneColor:\"#a200a3\",jointColor:\"#9f002e\" },\n        \"Eye R\": { boneColor:\"#320099\",jointColor:\"#9f002e\" },\n        \"Ear L\": { boneColor:\"#990066\",jointColor:\"#980098\" },\n        \"Ear R\": { boneColor:\"#660099\",jointColor:\"#6a009f\" }, \n        \"Delete L\": { boneColor:\"\",jointColor:\"#980032\" },\n        \"Delete R\": { boneColor:\"\",jointColor:\"#9c006a\" },\n        \"Hand L\": { boneColor:\"\",jointColor:\"#009933\" },\n        \"Hand R\": { boneColor:\"\",jointColor:\"#669900\" },\n        \"Foot L\": { boneColor:\"\",jointColor:\"#330098\" },\n        \"Foot R\": { boneColor:\"\",jointColor:\"#006598\" },        \n    }\n    /**\n     * render skeleton\n     * @param mesh\n     * @param skeleton\n     */        \n    function addSkeleton(mesh,skeleton) {\n        let spheres = []\n    //    skeleton.prepare()\n      \n        skeleton.bones.forEach(function (bone) {\n            if (\n                !bone.name.includes(\"neutral\") &&\n                !bone.name.includes(\"Skelett\") \n\n            ) {\n                let info=skeletonInfo[bone.name]\n                let color=\"#FF0000\"\n                if  (!bone.name.includes(\"Wrist\") && !bone.name.includes(\"Shoulder\")  && !bone.name.includes(\"Finger\")   && !bone.name.includes(\"Thumb\")) {\n                    const sphere = BABYLON.MeshBuilder.CreateSphere( \"joint_\" + bone.name, { segments: 4, diameter: .04 },   scene)\n                    sphere.attachToBone(bone, mesh)\n                    sphere.bone = bone\n                    sphere.renderingGroupId = 2\n                \n                    if (info && info.jointColor) color=info.jointColor\n                    sphere.material = new BABYLON.StandardMaterial(\"joint\")\n                    sphere.material.diffuseColor = BABYLON.Color3.FromHexString(color)\n                    sphere.renderForAI=true\n                    sphere.aiColor=BABYLON.Color3.FromHexString(color)                      \n                    spheres.push(sphere)                    \n                }\n                let path = []\n                let child\n                if (bone.children && bone.children[0]) {\n                    child = bone.children[0];\n                    path = [\n                        new BABYLON.Vector3(0, 0, 0),\n                        child.position,\n                    ];\n                } else {\n                    //  console.log(\"no children\", bone.name, bone)\n                }\n                color=\"#ffffff\"\n                if (info && info.boneColor) color=info.boneColor\n\n                let circle = getCirclePoints(.015, 5)\n                let extrusion\n                if (path.length  && !bone.name.includes(\"Finger\")   && !bone.name.includes(\"Thumb\") && !bone.name.includes(\"Hand\")) {\n                    extrusion = new BABYLON.MeshBuilder.ExtrudeShape(\n                        \"bone_\" + bone.name,\n                        {\n                            shape: circle,\n                            closeShape: true,\n                            path: path,\n                            sideOrientation: BABYLON.Mesh.DOUBLESIDE,\n                            updatable: true,\n                        },\n                        scene\n                    )\n\n                    extrusion.renderingGroupId = 2\n                    extrusion.bone = bone\n                    extrusion.child = child\n                    extrusion.attachToBone(bone, mesh)\n                    extrusion.material = new BABYLON.StandardMaterial(\"bone\")\n                    extrusion.renderForAI=true\n                    extrusion.aiColor=BABYLON.Color3.FromHexString(color)  \n                    extrusion.material.diffuseColor = BABYLON.Color3.FromHexString(color)  \n\n                    \n                }\n            }\n        })\n        \n    }\n    let positionData={\n        joints:{},\n        root:{}\n    }\n    function saveJointPositions() {\n        const position = BABYLON.Vector3.Zero()\n        const scaling = BABYLON.Vector3.Zero()\n        const rotationQ = BABYLON.Quaternion.Zero()     \n        let lmat=root.getLocalMatrix()\n        lmat.decompose(scaling, rotationQ, position)                \n        positionData.root={scaling:scaling.clone(),rotationQ:rotationQ.clone(),position:position.clone()}\n  \n        for(let mesh of scene.meshes) {\n            if (mesh.name.includes(\"joint_\")) {\n                let bone=mesh.bone\n                let lmat=bone.getLocalMatrix()\n                lmat.decompose(scaling, rotationQ, position)                \n\n                positionData.joints[mesh.name]={scaling:scaling.clone(),rotationQ:rotationQ.clone(),position:position.clone()}\n            }\n        }   \n    }\n    function restoreJointPositions() {\n        let node=root.getTransformNode()\n        let info=positionData.root\n        node.rotationQuaternion=new BABYLON.Quaternion(info.rotationQ._x,info.rotationQ._y,info.rotationQ._z,info.rotationQ._w)\n        node.position=new BABYLON.Vector3(info.position._x,info.position._y,info.position._z)                \n        node.scaling=new BABYLON.Vector3(info.scaling._x,info.scaling._y,info.scaling._z)  \n        for(let mesh of scene.meshes) {\n            if (mesh.name.includes(\"joint_\")) {\n                let bone=mesh.bone\n                node=bone.getTransformNode()\n\n                info=positionData.joints[mesh.name]\n                node.rotationQuaternion=new BABYLON.Quaternion(info.rotationQ._x,info.rotationQ._y,info.rotationQ._z,info.rotationQ._w)\n                node.position=new BABYLON.Vector3(info.position._x,info.position._y,info.position._z)                \n                node.scaling=new BABYLON.Vector3(info.scaling._x,info.scaling._y,info.scaling._z)  \n\n                if (node.rotationQuaternion) {\n                    bone.rotationQuaternion = node.rotationQuaternion;\n                } else {\n                    bone.rotation = node.rotation;\n                }\n                bone.scaling = node.scaling;\n            }\n        }   \n    }    \n    /**\n     * load current pose\n     * return: position object\n     */\n    export function getPose() {\n        saveJointPositions()\n        let res=[JSON.parse(JSON.stringify(positionData))]\n        return res\n    }\n    /**\n     * set current pose\n     * @param positionArray\n     */\n     export function setPose(positionArray) {\n        positionData=positionArray[0]\n        restoreJointPositions()\n    }\n    /**\n     * get full scene data: camera and all poses\n     */\n    export async function getScene() {\n        let image=await renderNormal()\n        let cameraInfo={}\n        let camera=scene.activeCamera\n        cameraInfo.position=JSON.parse(JSON.stringify(camera.position))\n        cameraInfo.rotation=JSON.parse(JSON.stringify(camera.rotation))\n        let poseInfo= getPose()\n        return {cameraInfo,poseInfo,image}\n    }\n    /**\n     * get full scene data: camera and all poses without image\n     */\n     export function getSceneNoImage() {\n        let cameraInfo={}\n        let camera=scene.activeCamera\n        cameraInfo.position=JSON.parse(JSON.stringify(camera.position))\n        cameraInfo.rotation=JSON.parse(JSON.stringify(camera.rotation))\n        let poseInfo= getPose()\n        return {cameraInfo,poseInfo}\n    }\n\n    /**\n     * set scene and pose data\n     */\n    export function setScene(sceneInfo) {\n        if (!root) {    // model might not be loaded yet - does not happen very often\n            setTimeout(() => {\n                setPose(sceneInfo.poseInfo)\n                let camera=scene.activeCamera\n                camera.position=sceneInfo.cameraInfo.position\n                camera.rotation=sceneInfo.cameraInfo.rotation        \n            },500)\n        } else {\n            setPose(sceneInfo.poseInfo)\n            let camera=scene.activeCamera\n            camera.position=sceneInfo.cameraInfo.position\n            camera.rotation=sceneInfo.cameraInfo.rotation        \n        }\n    }\n\n    /**\n     * make image from current scene for pose save\n     * @return: base64-url\n     */\n    export async function renderNormal() {\n        let oldMode=mode       \n        setMode(\"\")\n        await wait()\n        let url=canvas.toDataURL()             \n        setMode(oldMode)\n        return url\n    }\n    /**\n     * current mode\n     * @param  {(\"edit_skeleton\" | \"move_rotate\"  | \"scale\" | \"\")} \n     */\n    export let mode=\"\"\n    export function setMode(newMode) {\n        if (newMode===\"edit_skeleton\" && rotationGizmo && positionGizmo) {\n            if (rotationGizmo) rotationGizmo.attachedNode =null\n            if (positionGizmo) positionGizmo.attachedNode =null\n            if (scaleGizmo) scaleGizmo.attachedNode =null\n            if (axisScaleGizmo) axisScaleGizmo.attachedNode=null\n        }\n        if (newMode===\"move_rotate\" && root) {\n            rotationGizmo.attachedNode=root.getTransformNode()\n            positionGizmo.attachedNode=root.getTransformNode()\n            if (scaleGizmo) scaleGizmo.attachedNode =null\n            if (axisScaleGizmo) axisScaleGizmo.attachedNode=null\n        }\n        if (newMode===\"scale\" && rotationGizmo && positionGizmo) {\n            rotationGizmo.attachedNode =null\n            positionGizmo.attachedNode =null           \n            if (axisScaleGizmo) axisScaleGizmo.attachedNode=null\n            if (scaleGizmo) scaleGizmo.attachedNode =root.getTransformNode()\n        }        \n        if (newMode===\"\" && rotationGizmo && positionGizmo) {\n            rotationGizmo.attachedNode =null\n            positionGizmo.attachedNode =null            \n            scaleGizmo.attachedNode =null\n            if (axisScaleGizmo) axisScaleGizmo.attachedNode=null\n        }           \n    }\n\n\n    function dispatchChange(info) {\n        host.dispatchEvent( new CustomEvent(\"change\",info))\n    }\n    let rotationGizmo\n    let positionGizmo\n    let scaleGizmo\n    let axisScaleGizmo\n    let root\n    let pickedTransformNode\n    let rotationGizmoActive=false\n    let proxySphere\n    let currentJointName\n    let currentAxis\n    let currentRotationValue\n    /**\n     * add Gizmos to joints and main body for rotation\n     * @param bodyMeshes\n     */\n    function addGizmo(bodyMeshes,skeleton) {\n        //proxySphere = BABYLON.MeshBuilder.CreateSphere( \"proxy\" , { segments: 4, diameter: .06 },   scene)\n\n         proxySphere = BABYLON.MeshBuilder.CreateBox(\"box\", {height: 0.06, width: 0.06, depth: .06});\n\n        proxySphere.renderingGroupId = 2\n        proxySphere.isVisible=false\n\n\n        root=skeleton.bones[0]\n        // Create utility layer the gizmo will be rendered on\n        let utilLayer = new BABYLON.UtilityLayerRenderer(scene);\n        // position Gizmo\n        positionGizmo=new BABYLON.PositionGizmo(utilLayer)\n        // Create the gizmo and attach to the box\n        rotationGizmo = new BABYLON.RotationGizmo(utilLayer)\n\n        scaleGizmo = new BABYLON.ScaleGizmo(utilLayer)\n\n        positionGizmo.xGizmo.dragBehavior.onDragEndObservable.add(() => {\n            dispatchChange({type:\"position\",axis:\"x\"})\n        })\n        positionGizmo.yGizmo.dragBehavior.onDragEndObservable.add(() => {\n            dispatchChange({type:\"position\",axis:\"y\"})\n        })       \n        positionGizmo.zGizmo.dragBehavior.onDragEndObservable.add(() => {        \n            dispatchChange({type:\"position\",axis:\"z\"})\n        })           \n        \n        \n        /**\n         * rotation\n        */\n        rotationGizmo.xGizmo.dragBehavior.onDragEndObservable.add(() => {\n            rotationGizmoActive=false\n            proxySphere.isVisible=false\n            dispatchChange({type:\"rotation\",axis:\"x\"})\n        })\n        rotationGizmo.yGizmo.dragBehavior.onDragEndObservable.add(() => {\n            rotationGizmoActive=false\n            proxySphere.isVisible=false\n            dispatchChange({type:\"rotation\",axis:\"y\"})\n        })   \n\n        rotationGizmo.zGizmo.dragBehavior.onDragEndObservable.add(() => {\n            rotationGizmoActive=false\n            proxySphere.isVisible=false\n            dispatchChange({type:\"rotation\",axis:\"z\"})\n        })   \n        rotationGizmo.xGizmo.dragBehavior.onDragStartObservable.add(() => {\n            currentAxis=\"x\"\n            currentRotationValue=proxySphere.rotation[currentAxis]\n            rotationGizmoActive=true\n        })\n        rotationGizmo.yGizmo.dragBehavior.onDragStartObservable.add(() => {\n            currentAxis=\"y\"\n            currentRotationValue=proxySphere.rotation[currentAxis]\n            rotationGizmoActive=true\n        })   \n\n        rotationGizmo.zGizmo.dragBehavior.onDragStartObservable.add(() => {\n            currentAxis=\"z\"\n            currentRotationValue=proxySphere.rotation[currentAxis]\n            rotationGizmoActive=true\n        })   \n\n\n\n\n        scaleGizmo.xGizmo.dragBehavior.onDragEndObservable.add(() => {\n            dispatchChange({type:\"scale\",axis:\"x\"})\n        })\n        scaleGizmo.yGizmo.dragBehavior.onDragEndObservable.add(() => {\n            dispatchChange({type:\"scale\",axis:\"y\"})\n        })   \n        scaleGizmo.zGizmo.dragBehavior.onDragEndObservable.add(() => {\n            dispatchChange({type:\"scale\",axis:\"z\"})\n        })   \n        let axisScaleGizmo = new BABYLON.AxisScaleGizmo(new BABYLON.Vector3(0,1,0), BABYLON.Color3.FromHexString(\"#00b894\"), utilLayer);\n        axisScaleGizmo.attachedNode=null\n        // Keep the gizmo fixed to world rotation\n        rotationGizmo.updateGizmoRotationToMatchAttachedMesh = true\n        rotationGizmo.updateGizmoPositionToMatchAttachedMesh = true\n\n        positionGizmo.updateGizmoPositionToMatchAttachedMesh = true        \n        currentJointName=\"\"\n        scene.onPointerDown = function () {\n            const pickInfo = scene.pick(this.pointerX, this.pointerY)\n            if (pickInfo.hit && mode===\"edit_skeleton\") {\n                if (pickInfo.pickedMesh.name.includes(\"joint_\")) {\n                    let jointMesh=pickInfo.pickedMesh\n                    if (jointMesh.name===currentJointName) {\n                        rotationGizmo.attachedNode =null\n                        currentJointName=\"\"\n                    } else {\n                        currentJointName=jointMesh.name\n                        rotationGizmo.jointMesh=jointMesh\n                        pickedTransformNode=jointMesh.bone.getTransformNode()\n                        proxySphere.position=jointMesh.bone.getTransformNode().absolutePosition\n             //           proxySphere.rotation=pickedTransformNode.rotation\n                        proxySphere.isVisible=false\n                        rotationGizmo.attachedNode =pickedTransformNode\n                        axisScaleGizmo.attachedNode=null\n\n//                        proxySphere.parent=jointMesh\n//                        proxySphere.rotation=pickedTransformNode.rotation\n                        var worldMatrix = pickedTransformNode.getWorldMatrix();\nvar quatRotation =  new BABYLON.Quaternion();\nvar position = new BABYLON.Vector3();\nvar scale = new BABYLON.Vector3();\nworldMatrix.decompose(scale, quatRotation, position);                        \nlet euler=quatRotation.toEulerAngles()\nproxySphere.rotation=euler\n\n                    }                    \n                }\n                // change bone length\n                if (pickInfo.pickedMesh.name.includes(\"bone_\")) {\n\n                 //   let bone = pickInfo.pickedMesh.bone\n                 //   rotationGizmo.attachedNode=null\n                 //   axisScaleGizmo.attachedNode=  bone.getTransformNode()\n                }\n            }\n        }\n    }\n    export async function getPoseFromImage(imgTag) {\n        const pose =await new  Pose({locateFile: (file) => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n        }});\n        console.log(pose)\n        await pose.setOptions({\n  modelComplexity: 1,\n  smoothLandmarks: true,\n  enableSegmentation: true,\n  smoothSegmentation: true,\n  minDetectionConfidence: 0.5,\n  minTrackingConfidence: 0.5\n});\npose.onResults((results) => {\n\n    console.log(\"RES\", results)\n })\n await pose.reset()\n console.log(\"send noch\")\n       await  pose.send({ image:imgTag })\n\n       // console.log(\"pose\",pose)\n    }\n    /**\n     * show/hide all meshes from an array\n     * @param meshes\n     * @param enable\n     */\n    function showMeshes(meshes,enable) {\n        if (!meshes) return\n        for(let mesh of meshes) {\n                if (enable) mesh.visibility=1.0\n                else mesh.visibility=0.00001        // 0.0 does not work because it deactivates skeleton\n        }\n    }\n    /**\n     * default skeleton viewer - only for debugging\n     * @param mesh\n     * @param skeleton\n     */\n    export function addSkeletonViewer(mesh,skeleton) {\n       let skeletonViewer = new BABYLON.Debug.SkeletonViewer(\n                    skeleton,\n                    mesh,\n                    scene\n                )\n        skeletonViewer.isEnabled = true; // Enable it\n        skeletonViewer.color = BABYLON.Color3.Red(); // Change default color from white to red*/\n    }\n    /**\n     * set background to grey or transparent\n     */\n    export let background_type=\"transparent\"\n\n    let background=null\n    /**\n     * set background\n     * @param (\"grey\"|\"transparent\"|\"black\")\n    */\n    export function setBackground(type=\"grey\") {\n        if (!scene) return\n        if (type===\"transparent\") {\n            if (background) {\n                background.dispose()\n                background=null\n            }\n            scene.clearColor = new BABYLON.Color4(0, 0, 0, 0)\n        }\n        if (type===\"grey\") {\n            if (!background) {\n                background  = scene.createDefaultEnvironment({ enableGroundShadow: true  })\n                background.setMainColor(BABYLON.Color3.Gray())\n                background.ground.position.y += 0.01    \n            }\n            scene.clearColor=clearColorDefault\n        }\n        if (type===\"black\") {\n            if (background) {\n                background.dispose()\n                background=null\n            }\n            scene.clearColor= new BABYLON.Color4(0, 0, 0, 255)\n        }\n    }\n\n    let clearColorDefault\n    function initCanvas(canvas) {\n        engine = new BABYLON.Engine(canvas, true, {\n            preserveDrawingBuffer: true,\n            stencil: true,\n        })\n        engine.enableOfflineSupport = false\n        engine.resize()\n        // This is really important to tell Babylon.js to use decomposeLerp and matrix interpolation\n        BABYLON.Animation.AllowMatricesInterpolation = true\n\n        scene = new BABYLON.Scene(engine)\n        clearColorDefault=scene.clearColor\n        // var camera = new BABYLON.ArcRotateCamera(\"camera1\", Math.PI / 2, Math.PI / 4, 3, new BABYLON.Vector3(0, 1, 0), scene);\n        let camera = new BABYLON.ArcRotateCamera(\"camera1\",Math.PI / 2,Math.PI / 2, 3,new BABYLON.Vector3(0, 1, 0),scene)\n        camera.attachControl(canvas, true)\n        camera.lowerRadiusLimit = 1.2\n        camera.upperRadiusLimit = 8\n        camera.wheelDeltaPercentage = 0.01\n        camera.onViewMatrixChangedObservable.add(() => {\n                dispatchChange({type:\"camera\",position:camera.position,rotation:camera.rotation})\n        })\n        let light = new BABYLON.HemisphericLight(\"light1\",new BABYLON.Vector3(0, 1, 0),scene)\n        light.intensity = 0.6\n        light.specular = BABYLON.Color3.Black()\n\n        let light2 = new BABYLON.DirectionalLight( \"dir01\", new BABYLON.Vector3(0, -0.5, -1.0), scene)\n        light2.position = new BABYLON.Vector3(0, 5, 5)\n\n        // Shadows\n        let shadowGenerator = new BABYLON.ShadowGenerator(1024, light2)\n        shadowGenerator.useBlurExponentialShadowMap = true\n        shadowGenerator.blurKernel = 32\n\n        var groundMaterial = new BABYLON.GridMaterial(\"groundMaterial\", scene);\n        groundMaterial.majorUnitFrequency = 1;\n        groundMaterial.minorUnitVisibility = 0.1;\n        groundMaterial.gridRatio = 1;\n        groundMaterial.backFaceCulling = false;\n        groundMaterial.mainColor = new BABYLON.Color3(0, 0, 0);\n        groundMaterial.lineColor = new BABYLON.Color3(0,0, 0);\n        groundMaterial.opacity = 0.2;\n        \n        var ground = BABYLON.Mesh.CreateGround(\"ground1\", 20, 20, 2, scene);\n        ground.material = groundMaterial;\n\n        BABYLON.SceneLoader.ImportMesh( \"\",path+\"data/\",\"dummy3.glb\",scene,\n            function (meshes, particleSystems, skeletons) {\n                scene.stopAllAnimations();\n                var skeleton = skeletons[0]\n                var mesh = meshes[1] \n                loadedMeshes=meshes\n                meshFigure=mesh            \n                showMeshes(loadedMeshes,showHuman)   \n                // Removing the ability of being picked for all meshes already in scene\n                scene.meshes.forEach((element) => {\n                    element.isPickable = false\n                });\n\n                shadowGenerator.addShadowCaster(scene.meshes[0], true);\n                for (var index = 0; index < meshes.length; index++) {\n                    meshes[index].receiveShadows = false;\n                }\n\n\n                setBackground(background_type)\n                // add skeleton\n                addSkeleton(mesh,skeleton)\n                // add control to modify skeleton\n                addGizmo([meshes[1],meshes[2]],skeleton) \n                engine.hideLoadingUI()\n                startRenderLoop(engine, canvas)\n             //   let p=getPose()\n             //   setPose(p)\n             //   addSkeletonViewer(mesh,skeleton) \n            }\n        )\n\n    }\n    /**\n     * canvas can be used somewhere else\n     */\n    export let canvas\n</script>\n\n<canvas id=\"renderCanvas\" {width} {height} bind:this={canvas} class=\"canvas\"/>\n\n<style>\n    .canvas {\n        width:100%;\n        height:100%;\n    }\n    * {\n        box-sizing: border-box;\n    }\n    /** delete this CSS: */\n</style>\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","insert","target","node","anchor","insertBefore","detach","parentNode","removeChild","attr","attribute","value","removeAttribute","getAttribute","setAttribute","attribute_to_object","attributes","result","name","current_component","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","destroy_component","detaching","filtered","targets","c","indexOf","flush_render_callbacks","on_destroy","d","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","element","Array","from","childNodes","children","l","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","SvelteElement","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","key","slotted","appendChild","attributeChangedCallback","_oldValue","newValue","disconnectedCallback","$destroy","$on","type","index","splice","$set","$$props","obj","$$set","keys","path","import","meta","url","fdsHelper","static","componentname","fetchurl","alternativefetchurl","notfound","replace","get_href","res","fetch","response","ok","json","data","components","URL","href","pathname","document","createElement","canvas_1","async","getPoseFromImage","imgTag","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","minDetectionConfidence","minTrackingConfidence","onResults","results","reset","send","image","showMeshes","meshes","enable","mesh","visibility","host","width","height","showHuman","external_scene_storage","show_character","camera_behaviour","version","componentversion","engine","getSceneNoImage","scene","loadedMeshes","wait","setTimeout","skeletonInfo","top","boneColor","jointColor","addSkeleton","skeleton","bones","bone","includes","info","color","sphere","BABYLON","MeshBuilder","CreateSphere","segments","diameter","attachToBone","renderingGroupId","material","StandardMaterial","diffuseColor","Color3","FromHexString","renderForAI","aiColor","child","Vector3","position","extrusion","circle","radius","numSegments","points","angle","Math","PI","x","cos","y","sin","getCirclePoints","ExtrudeShape","shape","closeShape","sideOrientation","Mesh","DOUBLESIDE","updatable","positionData","joints","getPose","Zero","scaling","rotationQ","Quaternion","getLocalMatrix","decompose","clone","saveJointPositions","JSON","parse","stringify","setPose","positionArray","getTransformNode","rotationQuaternion","_x","_y","_z","_w","rotation","restoreJointPositions","cameraInfo","camera","activeCamera","poseInfo","renderNormal","oldMode","setMode","canvas","toDataURL","rotationGizmo","positionGizmo","scaleGizmo","pickedTransformNode","newMode","attachedNode","dispatchChange","dispatchEvent","CustomEvent","proxySphere","currentJointName","currentAxis","rotationGizmoActive","clearColorDefault","background_type","background","setBackground","dispose","$$invalidate","clearColor","Color4","createDefaultEnvironment","enableGroundShadow","setMainColor","Gray","ground","initCanvas","Engine","preserveDrawingBuffer","stencil","enableOfflineSupport","resize","Animation","AllowMatricesInterpolation","Scene","ArcRotateCamera","attachControl","lowerRadiusLimit","upperRadiusLimit","wheelDeltaPercentage","onViewMatrixChangedObservable","light","HemisphericLight","intensity","specular","Black","light2","DirectionalLight","shadowGenerator","ShadowGenerator","useBlurExponentialShadowMap","blurKernel","groundMaterial","GridMaterial","majorUnitFrequency","minorUnitVisibility","gridRatio","backFaceCulling","mainColor","lineColor","opacity","CreateGround","SceneLoader","ImportMesh","particleSystems","skeletons","stopAllAnimations","isPickable","addShadowCaster","receiveShadows","bodyMeshes","CreateBox","depth","isVisible","utilLayer","UtilityLayerRenderer","PositionGizmo","RotationGizmo","ScaleGizmo","xGizmo","dragBehavior","onDragEndObservable","axis","yGizmo","zGizmo","onDragStartObservable","axisScaleGizmo","AxisScaleGizmo","updateGizmoRotationToMatchAttachedMesh","updateGizmoPositionToMatchAttachedMesh","onPointerDown","pickInfo","pick","pointerX","pointerY","hit","pickedMesh","jointMesh","absolutePosition","worldMatrix","getWorldMatrix","quatRotation","scale","euler","toEulerAngles","addGizmo","hideLoadingUI","runRenderLoop","render","startRenderLoop","detachControl","getInfo","backgroundBack","showH","disableLighting","emissiveColor","sceneInfo","skeletonViewer","Debug","SkeletonViewer","isEnabled","Red","$$value"],"mappings":"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"}